#include <stdio.h>

// Define constants
#define MEMORY_SIZE 200

// Define opcodes
#define GD 1    // Get Data
#define PD 2    // Put Data
#define LR 3    // Load Register
#define SR 4    // Store Register
#define CR 5    // Compare
#define BT 6    // Branch on True
#define H 7     // Halt
#define ADD 8   // Add

// Memory and Registers
int memory[MEMORY_SIZE] = {0};  // Main memory
int general_register = 0;       // General-purpose register (4 bytes)
int toggle_register = 0;        // Toggle register (1 bit)
int instruction_counter = 50;   // Points to the next instruction (2 bytes)

// Function to execute the program
void execute_program() {
    while (1) {
        int instruction = memory[instruction_counter++];
        int opcode = (instruction >> 24) & 0xFF;  // Extract opcode
        int operand = instruction & 0xFFFFFF;     // Extract operand

        switch (opcode) {
            case LR:  // Load Register
                general_register = memory[operand];
                printf("LR: Loaded %d from Memory[%d] into register.\n", general_register, operand);
                break;

            case ADD:  // Add
                general_register += memory[operand];
                printf("ADD: Added %d from Memory[%d] to register. New value: %d.\n",
                       memory[operand], operand, general_register);
                break;

            case SR:  // Store Register
                memory[operand] = general_register;
                printf("SR: Stored %d from register into Memory[%d].\n", general_register, operand);
                break;

            case H:  // Halt
                printf("Program halted.\n");
                return;

            default:
                printf("Error: Unknown opcode %d.\n", opcode);
                return;
        }
    }
}

int main() {
    // Initialize memory with data and program
    memory[0] = 5;  // First number
    memory[1] = 10; // Second number
    memory[50] = (LR << 24) | 0;  // Load Memory[0] into register
    memory[51] = (ADD << 24) | 1; // Add Memory[1] to register
    memory[52] = (SR << 24) | 2;  // Store result in Memory[2]
    memory[53] = (H << 24);       // Halt

    // Execute the program
    execute_program();

    // Display the result
    printf("Result stored in Memory[2]: %d\n", memory[2]);
    return 0;
}



output:LR: Loaded 5 from Memory[0] into register.
ADD: Added 10 from Memory[1] to register. New value: 15.
SR: Stored 15 from register into Memory[2].
Program halted.
Result stored in Memory[2]: 15