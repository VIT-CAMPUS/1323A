#include <stdio.h>

struct Process {
    int id, at, bt, priority, ft, tat, wt;
};

void non_preemptive_priority_scheduling(struct Process p[], int n) {
    int time = 0, completed = 0;
    int isCompleted[n];
    for (int i = 0; i < n; i++) isCompleted[i] = 0;

    while (completed < n) {
        int highestPriority = -1;
        for (int i = 0; i < n; i++) {
            if (!isCompleted[i] && p[i].at <= time) {
                if (highestPriority == -1 || p[i].priority > p[highestPriority].priority) {
                    highestPriority = i;
                }
            }
        }

        if (highestPriority == -1) {
            time++;  // If no process is available, increment time
        } else {
            time += p[highestPriority].bt;  // Execute the selected process
            p[highestPriority].ft = time;  // Finish time
            p[highestPriority].tat = p[highestPriority].ft - p[highestPriority].at;  // Turnaround time
            p[highestPriority].wt = p[highestPriority].tat - p[highestPriority].bt;  // Waiting time
            isCompleted[highestPriority] = 1;  // Mark as completed
            completed++;
        }
    }

    printf("ID\tAT\tBT\tPriority\tFT\tTAT\tWT\n");
    for (int i = 0; i < n; i++)
        printf("P%d\t%d\t%d\t%d\t\t%d\t%d\t%d\n", p[i].id, p[i].at, p[i].bt, p[i].priority, p[i].ft, p[i].tat, p[i].wt);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process p[n];
    for (int i = 0; i < n; i++) {
        printf("Enter Arrival Time, Burst Time, and Priority for Process P%d: ", i + 1);
        scanf("%d%d%d", &p[i].at, &p[i].bt, &p[i].priority);
        p[i].id = i + 1;
    }

    non_preemptive_priority_scheduling(p, n);
    return 0;
}