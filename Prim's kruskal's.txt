#include <stdio.h>
#include <stdlib.h>

#define MAX 100
#define INF 99999

struct Edge {
    int src, dest, weight;
};

struct Graph {
    int V, E;
    struct Edge* edge;
};

struct subset {
    int parent;
    int rank;
};

struct Graph* createGraph(int V, int E);
int minKey(int key[], int mstSet[], int V);
void printMST_Prim(int parent[], int graph[MAX][MAX], int V);
void primMST(int graph[MAX][MAX], int V);
int find(struct subset subsets[], int i);
void Union(struct subset subsets[], int x, int y);
int compare(const void* a, const void* b);
void KruskalMST(struct Graph* graph);

int minKey(int key[], int mstSet[], int V) {
    int min = INF, min_index;
    for (int v = 0; v < V; v++)
        if (mstSet[v] == 0 && key[v] < min)
            min = key[v], min_index = v;
    return min_index;
}

void printMST_Prim(int parent[], int graph[MAX][MAX], int V) {
    printf("Edge \tWeight\n");
    for (int i = 1; i < V; i++)
        printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);
}

void primMST(int graph[MAX][MAX], int V) {
    int parent[MAX];
    int key[MAX];
    int mstSet[MAX];
    for (int i = 0; i < V; i++)
        key[i] = INF, mstSet[i] = 0;
    key[0] = 0;
    parent[0] = -1;
    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet, V);
        mstSet[u] = 1;
        for (int v = 0; v < V; v++)
            if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v])
                parent[v] = u, key[v] = graph[u][v];
    }
    printMST_Prim(parent, graph, V);
}

struct Graph* createGraph(int V, int E) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = V;
    graph->E = E;
    graph->edge = (struct Edge*)malloc(graph->E * sizeof(struct Edge));
    return graph;
}

int find(struct subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

void Union(struct subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);
    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

int compare(const void* a, const void* b) {
    struct Edge* a1 = (struct Edge*)a;
    struct Edge* b1 = (struct Edge*)b;
    return a1->weight > b1->weight;
}

void KruskalMST(struct Graph* graph) {
    int V = graph->V;
    struct Edge result[V];
    int e = 0;
    int i = 0;
    qsort(graph->edge, graph->E, sizeof(graph->edge[0]), compare);
    struct subset* subsets = (struct subset*)malloc(V * sizeof(struct subset));
    for (int v = 0; v < V; ++v) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }
    while (e < V - 1 && i < graph->E) {
        struct Edge next_edge = graph->edge[i++];
        int x = find(subsets, next_edge.src);
        int y = find(subsets, next_edge.dest);
        if (x != y) {
            result[e++] = next_edge;
            Union(subsets, x, y);
        }
    }
    printf("Following are the edges in the constructed MST \n");
    for (i = 0; i < e; ++i)
        printf("(%d %d) = %d\n", result[i].src, result[i].dest, result[i].weight);
    free(subsets);
}

int main() {
    int V, E, choice;
    printf("Enter the number of vertices : ");
    scanf("%d", &V);
    printf("Choose algorithm:\n1. Prim's Algorithm\n2. Kruskal's Algorithm\n");
    scanf("%d", &choice);
    if (choice == 1) {
        int graph[MAX][MAX];
        printf("Enter the adjacency matrix (0 for no edge):\n");
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                scanf("%d", &graph[i][j]);
            }
        }
        primMST(graph, V);
    } else if (choice == 2) {
        printf("Enter the number of edges: ");
        scanf("%d", &E);
        struct Graph* graph = createGraph(V, E);
        printf("Enter the edges :\n");
        for (int i = 0; i < E; i++) {
            scanf("%d %d %d", &graph->edge[i].src, &graph->edge[i].dest, &graph->edge[i].weight);
        }
        KruskalMST(graph);
        free(graph->edge);
        free(graph);
    } else {
        printf("Invalid choice!\n");
    }
    return 0;
}



































//prims vertex=4
/*0 2 0 6
2 0 3 8
0 3 0 0
6 8 0 0*/

//kruskals
//edges=5
/*0 1 2
0 3 6
1 2 3
1 3 8
2 3 5*/


