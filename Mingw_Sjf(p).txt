#include <stdio.h>
#include <limits.h>

struct Process {
    int id;
    int arrivalTime;
    int burstTime;
    int remainingTime;
    int completionTime;
    int turnAroundTime;
    int waitingTime;
};

void sjfPreemptive(struct Process processes[], int n) {
    int currentTime = 0, completed = 0;
    int shortest = -1;
    int minRemainingTime = INT_MAX;
    
    while (completed < n) {
        // Find the process with the shortest remaining time
        for (int i = 0; i < n; i++) {
            if (processes[i].arrivalTime <= currentTime && processes[i].remainingTime > 0) {
                if (processes[i].remainingTime < minRemainingTime) {
                    minRemainingTime = processes[i].remainingTime;
                    shortest = i;
                }
            }
        }

        if (shortest == -1) {
            currentTime++;
            continue;
        }

        // Process the shortest job
        processes[shortest].remainingTime--;
        
        if (processes[shortest].remainingTime == 0) {
            completed++;
            processes[shortest].completionTime = currentTime + 1;
            processes[shortest].turnAroundTime = processes[shortest].completionTime - processes[shortest].arrivalTime;
            processes[shortest].waitingTime = processes[shortest].turnAroundTime - processes[shortest].burstTime;
        }
        
        currentTime++;
        minRemainingTime = INT_MAX;
        shortest = -1;
    }
}

void printProcessDetails(struct Process processes[], int n) {
    printf("Process ID\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", 
                processes[i].id, 
                processes[i].arrivalTime, 
                processes[i].burstTime, 
                processes[i].completionTime, 
                processes[i].turnAroundTime, 
                processes[i].waitingTime);
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];
    
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for Process %d: ", i + 1);
        processes[i].id = i + 1;
        scanf("%d%d", &processes[i].arrivalTime, &processes[i].burstTime);
        processes[i].remainingTime = processes[i].burstTime;
    }

    sjfPreemptive(processes, n);
    printProcessDetails(processes, n);

    return 0;
}
