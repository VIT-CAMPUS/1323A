#include <stdio.h>
#include <stdlib.h>

#define MAX 100

// Structure to represent a graph
struct Graph {
    int adjMatrix[MAX][MAX];
    int numVertices;
};

// Function to initialize a graph
void initGraph(struct Graph* g, int vertices) {
    g->numVertices = vertices;

    // Initialize all elements in the adjacency matrix to 0
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            g->adjMatrix[i][j] = 0;
        }
    }
}

// Function to add an edge to the graph (undirected)
void addEdge(struct Graph* g, int start, int end) {
    g->adjMatrix[start][end] = 1;
    g->adjMatrix[end][start] = 1; // Since the graph is undirected
}

// Depth First Search (DFS) helper function
void dfs(struct Graph* g, int vertex, int visited[]) {
    printf("%d ", vertex);
    visited[vertex] = 1;

    for (int i = 0; i < g->numVertices; i++) {
        if (g->adjMatrix[vertex][i] == 1 && visited[i] == 0) {
            dfs(g, i, visited);
        }
    }
}

// Breadth First Search (BFS) helper function
void bfs(struct Graph* g, int start) {
    int visited[MAX] = {0};
    int queue[MAX], front = 0, rear = 0;

    visited[start] = 1;
    queue[rear++] = start;

    while (front < rear) {
        int vertex = queue[front++];
        printf("%d ", vertex);

        for (int i = 0; i < g->numVertices; i++) {
            if (g->adjMatrix[vertex][i] == 1 && visited[i] == 0) {
                visited[i] = 1;
                queue[rear++] = i;
            }
        }
    }
}

// Function to display the graph (adjacency matrix)
void displayGraph(struct Graph* g) {
    printf("Adjacency Matrix:\n");
    for (int i = 0; i < g->numVertices; i++) {
        for (int j = 0; j < g->numVertices; j++) {
            printf("%d ", g->adjMatrix[i][j]);
        }
        printf("\n");
    }
}

// Main function with menu-driven interface
int main() {
    struct Graph g;
    int choice, vertices, start, end;

    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);
    initGraph(&g, vertices);

    do {
        printf("\n--- Graph Traversal Menu ---\n");
        printf("1. Add an edge\n");
        printf("2. Display the graph (Adjacency Matrix)\n");
        printf("3. Depth First Search (DFS)\n");
        printf("4. Breadth First Search (BFS)\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the start vertex and end vertex for the edge: ");
                scanf("%d %d", &start, &end);
                if (start >= 0 && start < vertices && end >= 0 && end < vertices) {
                    addEdge(&g, start, end);
                    printf("Edge added between %d and %d.\n", start, end);
                } else {
                    printf("Invalid vertices!\n");
                }
                break;
            case 2:
                displayGraph(&g);
                break;
            case 3:
                printf("Enter the starting vertex for DFS: ");
                scanf("%d", &start);
                if (start >= 0 && start < vertices) {
                    int visited[MAX] = {0};
                    printf("Depth First Search starting from vertex %d: ", start);
                    dfs(&g, start, visited);
                    printf("\n");
                } else {
                    printf("Invalid starting vertex!\n");
                }
                break;
            case 4:
                printf("Enter the starting vertex for BFS: ");
                scanf("%d", &start);
                if (start >= 0 && start < vertices) {
                    printf("Breadth First Search starting from vertex %d: ", start);
                    bfs(&g, start);
                    printf("\n");
                } else {
                    printf("Invalid starting vertex!\n");
                }
                break;
            case 5:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Try again.\n");
        }
    } while (choice != 5);

    return 0;
}
